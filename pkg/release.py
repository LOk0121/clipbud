#!/usr/bin/env python3
import datetime
import os
import re

UPDATES = {
    'Cargo.toml': {
        'parse': r'^version\s*=\s*"([^"]+)"$',
        'format': 'version = "%s"'
    }
}

def is_correct_working_dir():
    return os.path.exists("Cargo.toml") and os.path.exists('.git') and os.path.exists('src')

def set_working_dir():
    while not is_correct_working_dir():
        os.chdir('..')

    print(f'working dir: {os.getcwd()}')

def get_current_version():
    with open('Cargo.toml', 'rt') as fp:
        manifest = fp.read()

    m = re.findall(UPDATES['Cargo.toml']['parse'], manifest, re.MULTILINE)
    if len(m) != 1:
        print("could not parse current version from Cargo.toml")
        quit()

    return m[0]

def generate_changelog(new_version):
    print(f'generating changelog for version {new_version} ...')

    got_one = False
    for key in ['OPENAI_API_KEY', 'ANTHROPIC_API_KEY']:
        if os.getenv(key):
            got_one = True
            break

    if not got_one:
        print("no API key found, set OPENAI_API_KEY or ANTHROPIC_API_KEY")
        quit()

    if os.system("nerve run changelog -q > /tmp/clipbud-changelog.md") != 0:
        print("failed to generate changelog")
        quit()

    AGENT_FOOTER = '<sup>This changelog was generated by [Changelog](http://github.com/evilsocket/changelog).</sup>'
    with open('/tmp/clipbud-changelog.md', 'rt') as fp:
        changelog = fp.read().replace(AGENT_FOOTER, '').strip()

    old_changelog = ''
    if os.path.exists('CHANGELOG.md'):
        with open('CHANGELOG.md', 'rt') as fp:
            old_changelog = fp.read().strip()

    current_date = datetime.datetime.now().strftime('%Y-%m-%d')
    new_changelog = f'''## Version {new_version} ({current_date})\n\n{changelog}\n\n{old_changelog}'''.strip()
    
    with open('CHANGELOG.md', 'wt') as fp:
        fp.write(new_changelog)

def update_files(new_version):
    for file, data in UPDATES.items():
        print(f'updating {file} ...')
        with open(file, 'rt') as fp:
            contents = fp.read()

        result = re.sub(data['parse'], data['format'] % next_ver, contents, 0, re.MULTILINE)
        with open(file, 'wt') as fp:
            fp.write(result)

if __name__ == '__main__':
    # make sure we're in the correct working directory
    set_working_dir()
    # make sure linting is clean
    if os.system("cargo clippy --all-targets -- -D warnings") != 0:
        print("clippy failed")
        quit()

    # make sure tests are passing
    if os.system("cargo test --all-targets") != 0:
        print("tests failed")
        quit()

    os.system("clear")

    # get current version
    current_ver = get_current_version()
    # get next version from user
    next_ver = input("current version is %s, enter next: " % current_ver)
    # generate the changelog using AI
    generate_changelog(next_ver)
    # update files with new version
    update_files(next_ver)
    # make sure Cargo.lock is up to date
    os.system("cargo update -p clipbud")
    # show what changed
    os.system("git status")

    print("")
    print("Now remember to:\n")

    print("- Commit, push and create the new tag:\n")
    print("git add Cargo.*")
    print("git add CHANGELOG.md")
    print("git commit -m 'releasing version %s'" % next_ver)
    print("git push")
    print("git tag -a %s -m 'releasing v%s'" % (next_ver, next_ver))
    print("git push origin %s" % next_ver)
    print()

    print("- Verify and publish on crates.io:\n")
    print("cargo publish --dry-run && cargo publish")
    print()

    print("- Add the generated changelog to the GitHub release.")
    # print("- Update pkg/brew/clipbud.rb once the precompiled binaries are available.")

